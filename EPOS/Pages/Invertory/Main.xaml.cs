using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data.Entity;

namespace EPOS.Pages.Invertory
{
    /// <summary>
    /// Interaction logic for Main.xaml
    /// </summary>
    public partial class Main : Page
    {
        public Main()
        {
            InitializeComponent();
            //gridInventory.AutoGeneratedColumns += GridInventory_AutoGeneratedColumns;
            gridInventory.AutoGeneratingColumn += gridInventory_AutoGeneratingColumn;

            //Table = Database.GetInstance<Mysql>().Select("select ID,Name,Cost,Price,SKU,Catagory,MixMatch,WarrantyType from `products` where Enabled=1");
            DB.DBContext.Instance.Products.Load();
            gridInventory.ItemsSource = DB.DBContext.Instance.Products.Local;
        }

        private void GridInventory_AutoGeneratedColumns(object sender, EventArgs e)
        {
            //gridInventory.Columns[0].DisplayIndex = gridInventory.Columns.Count - 1;
        }

        public void Filter(string Filter)
        {
            if (Filter != "")
                FilterText.Text = Filter;
        }

        private void ListView_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (gridInventory.SelectedItem == null)
                return;
            var Item = gridInventory.SelectedItem as DB.Models.Product;
            //MessageBox.Show((string)Item["Name"]);
            Windows.Invertory.Instance.InvoicePage.AddItem(Item);
        }

        

        private void gridInventory_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                e.Cancel = true;
            }
            else if (e.PropertyName == "Enabled")
                e.Cancel = true;
            else if (e.PropertyName == "Added")
                e.Cancel = true;
            else if (e.PropertyName == "NumberOfSales")
                e.Cancel = true;
            else if (e.PropertyName == "WarrantyType")
                e.Cancel = true;
            else if (e.PropertyName == "Attribute")
                e.Cancel = true;
            
            else if (e.PropertyName == "Name")
                e.Column.Width = 200;
            else if (e.PropertyName == "SKU")
                e.Column.Width = 100;
            else if (e.PropertyName == "Cost")
                e.Cancel = true;
        }

        private void Filter_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (gridInventory == null)
                return;
            if (FilterText.Text == "")
            {
                gridInventory.ItemsSource = DB.DBContext.Instance.Products.Local;
                return;
            }

            string Type = ((ListBoxItem)FilterSelection.SelectedItem).Content.ToString();
            //if (Type == "Price LessThan")
            //    ViewManager.RowFilter = "Price < " + FilterText.Text + "";
            //else if (Type == "Price MoreThan")
            //    ViewManager.RowFilter = "Price > " + FilterText.Text + "";
            //else
            //    ViewManager.RowFilter = Type + " Like '%" + FilterText.Text + "%'";
            DB.DBContext.Instance.Products.Where(a => a.Name.Contains(FilterText.Text));
        }

        private void Filter_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            FilterText.Text = "";
            Filter_TextChanged(null, null);

        }
    }
}
